class JumpWall {

   field RectangleCollider collider;
   field int x, y, sizeX, sizeY;

   constructor JumpWall new(int ax, int ay, int aSizeX, int aSizeY) {
      let x = ax;
      let y = ay;
      let sizeX = aSizeX;
      let sizeY = aSizeY;
      let collider = RectangleCollider.new(x, y, sizeX, sizeY);
      do draw();
      return this;
   }

   method void dispose() {
      do erase();
      do collider.dispose();
      do Memory.deAlloc(this);
      return;
   }

   method void draw() {
      var int memAddress, step, i;
      let step = 480 + 32;
      while (i < 16) {
         let memAddress = 16384 + (step * i) + (x / 16) + (y * 32);
         do Memory.poke(memAddress + 0, -24571);
         do Memory.poke(memAddress + 32, -15997);
         do Memory.poke(memAddress + 64, -32191);
         do Memory.poke(memAddress + 96, -31711);
         do Memory.poke(memAddress + 128, -30703);
         do Memory.poke(memAddress + 160, -28663);
         do Memory.poke(memAddress + 192, -24571);
         do Memory.poke(memAddress + 224, -15997);
         do Memory.poke(memAddress + 256, -32191);
         do Memory.poke(memAddress + 288, -31711);
         do Memory.poke(memAddress + 320, -30703);
         do Memory.poke(memAddress + 352, -28663);
         do Memory.poke(memAddress + 384, -24571);
         do Memory.poke(memAddress + 416, -15997);
         do Memory.poke(memAddress + 448, -32191);
         do Memory.poke(memAddress + 480, -1);
         let i = i + 1;
      }
      return;
      }
 
   method void erase() {
      var int memAddress, step, i;
      let step = 480 + 32;
      while (i < 16) {
         let memAddress = 16384 + (step * i) + (x / 16) + (y * 32);
         do Memory.poke(memAddress + 0, 0);
         do Memory.poke(memAddress + 32, 0);
         do Memory.poke(memAddress + 64, 0);
         do Memory.poke(memAddress + 96, 0);
         do Memory.poke(memAddress + 128, 0);
         do Memory.poke(memAddress + 160, 0);
         do Memory.poke(memAddress + 192, 0);
         do Memory.poke(memAddress + 224, 0);
         do Memory.poke(memAddress + 256, 0);
         do Memory.poke(memAddress + 288, 0);
         do Memory.poke(memAddress + 320, 0);
         do Memory.poke(memAddress + 352, 0);
         do Memory.poke(memAddress + 384, 0);
         do Memory.poke(memAddress + 416, 0);
         do Memory.poke(memAddress + 448, 0);
         do Memory.poke(memAddress + 480, 0);
         let i = i + 1;
      }
      return;
   }

   method boolean tryMove() {
      var int modulo;
      if (x > 1) {
         let modulo = Utils.mod(x, 16);
         if (modulo = 0) { do erase(); }
         let x = x - 2;
         do collider.setX(x);
         do draw();
         return true;
      }
      else {
        return false;
      }
   }

   method RectangleCollider getCollider() {
    return collider;
   }
}
